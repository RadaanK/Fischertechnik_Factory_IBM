/*
* This function makes a query in the cloudant database which is conncted to the IBM IoT platform.
* To be exact, the informations stored by the processing station are queried. 
* The last event stored by the porcesing station is queried and decoded. The final answer is then responded.
*/

// Package for Cloudant Database
const Cloudant = require("@cloudant/cloudant");

// Credendials for Cloudant Database
const user = "e21c54a4-4228-49d2-8f74-7e9422ae4f18-bluemix";
const password = "86fa5e7388e52dab849ef5517f1ee986b8e048ae8781e44ea303fb6861c13759";

// Database Name (Example: iotp_7k0aag_default_2019-07-31)
const database = "iotp_6feat5_events_" + new Date().toISOString().substring(0,10);

// Database Query
const query = {
   "selector": {
      "deviceId": {
         "$eq": "Processing_Station_Munich"
      },
      "data.data": {
          "$gt": 0,
         "$lt": 21
      }
   },
   "fields": [
      "_id",
      "_rev",
      "timestamp",
      "deviceId",
      "data"
   ],
   "sort": [
      {
         "timestamp": "desc"
      }
   ]
};

function main() {
  return new Promise((resolve, reject) => {
    const client = Cloudant({account: user, password: password});
    if (client) {
        try {
            const register = client.db.use(database);
            register.find(query, (err, data) => {
                if(err) {
                    reject("Error getting data");
                } else if("docs" in data && data.docs.length > 0) {
                    switch (data.docs[0].data.data) {
                      case 1:
                        resolve({"station": "started reference run"});
                      case 2:
                        resolve({"station": "a reference run was finished"});
                      case 3:
                        resolve({"station": "started painting process"});
                      case 4:
                        resolve({"station": "finished painting process"});
                      case 5:
                        resolve({"station": "started picking-up at painting booth"});
                      case 6:
                        resolve({"station": "finished picking-up at painting booth"});
                      case 7:
                        resolve({"station": "started moving the vacuum gripper to the turning table"});
                      case 8:
                        resolve({"station": "finished moving the vacuum gripper to the turning table"});
                      case 9:
                        resolve({"station": "started dropping-off"});
                      case 10:
                        resolve({"station": "finished dropping-off"});
                        
                      case 11:
                        resolve({"station": "started moving vacuum gripper to the painting booth"});
                      case 12:
                        resolve({"station": "finished moving vacuum gripper to the painting booth"});
                      case 13:
                        resolve({"station": "started moving turning table to the polishing station"});
                      case 14:
                        resolve({"station": "finished moving turning table to the polishing station"});
                      case 15:
                        resolve({"station": "started moving turning table to conveyor"});
                      case 16:
                        resolve({"station": "finished moving turning table to conveyor"});
                      case 17:
                        resolve({"station": "started pushing workpiece to the conveyor"});
                      case 18:
                        resolve({"station": "finished pushing workpiece to the conveyor"});
                      case 19:
                        resolve({"station": "started moving truning table to vacuum gripper"});
                      case 20:
                        resolve({"station": "finished moving truning table to vacuum gripper"});
                        
                      default:
                        reject("the last command could not be decoded");
                    }
                } else {
                    reject("Error: No data available!");
                }
            });
        } catch (err) {
            reject("Error during get data: " + err);
        }
    } else {
        reject("Error: Could not connect to database.");
    }
})
}
exports.main = main;
