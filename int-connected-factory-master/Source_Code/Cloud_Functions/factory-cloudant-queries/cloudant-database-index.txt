/*
    We want to sort our database (cloudant) according to the newest timestamp to gett the current informations.
    Therefore we need to index the timestamp (see line 24). This function is excecuted one day before the data is written in the database.
    When you need more informations on this topic please ask Arvid Ottenberg
*/

// Package for Cloudant Database
const Cloudant = require("@cloudant/cloudant");

// Credendials for Cloudant Database
const user = "e21c54a4-4228-49d2-8f74-7e9422ae4f18-bluemix";
const password = "86fa5e7388e52dab849ef5517f1ee986b8e048ae8781e44ea303fb6861c13759";

// Database Name (Example: iotp_7k0aag_default_2019-07-31)
const today = new Date();
const tomorrow = new Date();
tomorrow.setDate(today.getDate()+1);
const database = "iotp_6feat5_events_" + tomorrow.toISOString().substring(0,10);


// Database Query
const index = {
    "index": {
        "fields": ["timestamp"]
    },
    "name" : "timestamp-partitioned-index",
    "type" : "json",
    "partitioned": false
};

function main() {
  return new Promise((resolve, reject) => {
    console.log(database);
    const client = Cloudant({account: user, password: password});
    if (client) {
        try {
            const register = client.db.use(database);
            register.index(index, (err, result) => {
              if (err) {
                reject({"error": "Error creating index!"});
              } else {
                  resolve(result);
              }
            })
        } catch (err) {
            reject("Error during index creation: " + err);
        }
    } else {
        reject("Error: Could not connect to database.");
    }
})
}
exports.main = main;
