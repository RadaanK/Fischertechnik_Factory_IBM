/*
* This function makes a query in the cloudant database which is conncted to the IBM IoT platform.
* To be exact, the informations stored by the vacuum gripper 2 are queried. 
* This function makes a query to identify the last production step executed at the vacuum gripper 2.
* The information is stored in the data files as a number. The infomation is decoded and then send back to the
* Watson Assistant
*/

// Package for Cloudant Database
const Cloudant = require("@cloudant/cloudant");

// Credendials for Cloudant Database
const user = "e21c54a4-4228-49d2-8f74-7e9422ae4f18-bluemix";
const password = "86fa5e7388e52dab849ef5517f1ee986b8e048ae8781e44ea303fb6861c13759";

// Database Name (Example: iotp_7k0aag_default_2019-07-31)
const database = "iotp_6feat5_events_" + new Date().toISOString().substring(0,10);

// Database Query
const query = {
   "selector": {
      "deviceId": {
         "$eq": "VacuumGripperMunich_2"
      },
      "data.data": {
          "$gt": 0,
         "$lt": 40
      }
   },
   "fields": [
      "_id",
      "_rev",
      "timestamp",
      "deviceId",
      "data"
   ],
   "sort": [
      {
         "timestamp": "desc"
      }
   ]
};

function main() {
  return new Promise((resolve, reject) => {
    const client = Cloudant({account: user, password: password});
    if (client) {
        try {
            const register = client.db.use(database);
            register.find(query, (err, data) => {
                if(err) {
                    reject("Error getting data");
                } else if("docs" in data && data.docs.length > 0) {
                    switch (data.docs[0].data.data) {
                      case 1:
                        resolve({"station": "started reference run"});
                      case 2:
                        resolve({"station": "finished reference run"});
                      case 8:
                        resolve({"station": "waiting for a new command"});
                      case 9:
                        resolve({"station": "recieved a new command"});
                      case 10:
                        resolve({"station": "finished excecution of the last command"});
                        
                      case 11:
                        resolve({"station": "started movement in x-direction"});
                      case 12:
                        resolve({"station": "finished movement in x-direction"});
                      case 13:
                        resolve({"station": "started movement in y-direction"});
                      case 14:
                        resolve({"station": "finished movement in y-direction"});
                      case 15:
                        resolve({"station": "started movement in z-direction"});  
                      case 16:
                        resolve({"station": "finished movement in z-direction"});
                        
                      case 21:
                        resolve({"station": "move to the first slide of the sorting line"});
                      case 22:
                        resolve({"station": "move to the second slide of the sorting line"});
                      case 23:
                        resolve({"station": "move to the third slide of the sorting line"});
                      case 24:
                        resolve({"station": "move to the second warehouse"});
                      case 25:
                        resolve({"station": "finished movement"});
                      case 26:
                        resolve({"station": "started picking-up"});
                      case 27:
                        resolve({"station": "finished picking-up"});
                      case 28:
                        resolve({"station": "started drop-off"});  
                      case 29:
                        resolve({"station": "finished drop-off"});
                        
                      case 31:
                        resolve({"station": "turned on compressor"});
                      case 32:
                        resolve({"station": "turned off compressor"});
                      case 33:
                        resolve({"station": "opened valve"});
                      case 34:
                        resolve({"station": "closed valve"});
                      case 36:
                        resolve({"station": "workpiece is ready at warehouse 2 for drop off"});
                      case 37:
                        resolve({"station": "crane is ready at warehouse to pick a workpiece"});
                      case 38:
                        resolve({"station": "crane has delivered a workpiece"});
                      case 39:
                        resolve({"station": "crane has recieved a workpiece from the warehouse"});
                        
                      default:
                        reject("Something went wrong detecting the production step.");
                    }
                } else {
                    reject("Error: No data available!");
                }
            });
        } catch (err) {
            reject("Error during get data: " + err);
        }
    } else {
        reject("Error: Could not connect to database.");
    }
})
}
exports.main = main;
