/*
* This function sends a command to the IBM IoT platform
* It brings the second vacuum gripper to pick a workpiece at the second slide of the sorting line and to transport it to the 
* output warehouse (warehouse 2)
*/

const rp = require("request-promise");
// Device Type to publish command with
const deviceType = "watsonassistant";
// Device ID to publish command with
const deviceId = "vacuumgripper_2";
// Type of the command
const commandType = "pickup";
// Payload sent with the command
const payload = {"slide": 2 };


function main() {
  return new Promise((resolve, reject) => {
        concatUrl(deviceType, deviceId, payload, commandType)
                    .then(iotOptions => {
                        console.log(iotOptions);
                        rp(iotOptions)
                            .then(success => resolve({"status": "Successfully published device command."}))
                            .catch(err => reject(err))
                            //.catch(err => reject("Error: Command could not be send to the IoT platform"))
                    })
    })
};

function concatUrl(deviceType, deviceId, payload, comm) {
    return new Promise((resolve, reject) => {
        let options = {
            method: "POST",
            json: true,
            body: payload,
            headers: {
                "content-type": "application/json",
                authorization: 'Basic YS02ZmVhdDUtemVpZHhyaWMwZzp0X0VTQFJNNk1sM0hhTEtiKHk='
                // for generating the authorisation use https://www.blitter.se/utils/basic-authentication-header-generator/
                // Use an API Key as Username and token as password
            }
        }
        let type = `/types/${deviceType}`;
        let id = `/devices/${deviceId}`;
        let command = `/commands/${comm}`
        let iotUrl = "https://6feat5.messaging.internetofthings.ibmcloud.com:8883/api/v0002/application";

        options.url = iotUrl.concat(type, id, command);
        resolve(options)
    })
};